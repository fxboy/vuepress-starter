(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{395:function(t,e,n){"use strict";n.r(e);var i=n(22),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),n("p",[t._v("框架中有5个自定义异常,其中token校验失败已经已经弃用，改为了 AuthenticationException")]),t._v(" "),n("h2",{attrs:{id:"authenticationexception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#authenticationexception"}},[t._v("#")]),t._v(" AuthenticationException")]),t._v(" "),n("p",[t._v("验证中失败异常，主要用于在 校验传权时，用户未登录，token失效，token不存在等等问题，所抛出此异常后，可直接进入鉴权失败处理，如果实现了AuthenticationExceptionHandler接口，\n则会将转移到此处来进行处理相应的操作")]),t._v(" "),n("h2",{attrs:{id:"notfoundhandlerimplexception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notfoundhandlerimplexception"}},[t._v("#")]),t._v(" NotFoundHandlerImplException")]),t._v(" "),n("p",[t._v("没有找到拦截接口实现类异常，在配置文件中，我们定义了4个配置，只要它不为null的话，在鉴权期间，则会根据这个配置然后反射此实现类，如果没有找到当前类，则会抛出，和ClassNotFoundException一样，但只用于框架中这4个接口")]),t._v(" "),n("h2",{attrs:{id:"permissiontypeexcetion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#permissiontypeexcetion"}},[t._v("#")]),t._v(" PermissionTypeExcetion")]),t._v(" "),n("p",[t._v("操作权限类型出现异常，因为操作权限的类型仅支持 String,String[],ArraList< String >,如果传入的类型不是这三种，则会抛出此异常")]),t._v(" "),n("h2",{attrs:{id:"roleslengthexcetion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#roleslengthexcetion"}},[t._v("#")]),t._v(" RolesLengthExcetion")]),t._v(" "),n("p",[t._v("传入的角色长度为0，也就是在传权的时候，没有传入角色")]),t._v(" "),n("h2",{attrs:{id:"tokenverificationfailedexception-已弃用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tokenverificationfailedexception-已弃用"}},[t._v("#")]),t._v(" TokenVerificationFailedException （已弃用）")]),t._v(" "),n("p",[t._v("原先是1.0.2中校验token出错的异常，由于1.3.5后改为不止可以校验token，所以抛弃了此异常并更换成AuthenticationException")])])}),[],!1,null,null,null);e.default=a.exports}}]);